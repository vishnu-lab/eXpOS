//loading init program
loadi(65,7);
loadi(66,8);

//loading int 10 module
loadi(22,35);
loadi(23,36);

//loading exception handler
loadi(2, 15);
loadi(3, 16);

//loading library
loadi(63,13);
loadi(64,14);

//loading timer interrupt
loadi(4, 17);
loadi(5, 18);

//loading int 7 module
loadi(16,29);
loadi(17,30);

//loading idle process
loadi(69,11);
loadi(70,12);

//setting up the process table for idle process
[PROCESS_TABLE + 1] = 0;
[PROCESS_TABLE + 4] = CREATED;
[PROCESS_TABLE + 11] = 82;
[PROCESS_TABLE + 12] = 0;
[PROCESS_TABLE + 13] = 8*512;
[PROCESS_TABLE + 14] = PAGE_TABLE_BASE;
[PROCESS_TABLE + 15] = 10;

//setting up process table for init process
[PROCESS_TABLE + 16 + 1] = 1;
[PROCESS_TABLE + 16 + 4] = RUNNING;
[PROCESS_TABLE + 16 + 11] = 80;
[PROCESS_TABLE + 16 + 12] = 0;
[PROCESS_TABLE + 16 + 13] = 8*512;
[PROCESS_TABLE + 16 + 14] = PAGE_TABLE_BASE + 20;
[PROCESS_TABLE + 16 + 15] = 10;


//initialize system status table entry for running INIT process
[SYSTEM_STATUS_TABLE + 1] = 1;

//creating page table entries for idle process

PTBR=PAGE_TABLE_BASE;  //as PID of idle process is 0

//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = 83;
[PTBR+5] = "0110";
[PTBR+6] = 84;
[PTBR+7] = "0110";

//Code
[PTBR+8] = 69;
[PTBR+9] = "0100";
[PTBR+10] = 70;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 81;
[PTBR+17] = "0110";
[PTBR+18] = 85;
[PTBR+19] = "0110";

//setting up user stack of idle process
SP = 81*512 - 1;
R0 = [69*512 +1];
multipush (R0);

//creating page table entries for init program
 PTBR = PAGE_TABLE_BASE + 20;
 PTLR = 10;

//setting up the values of page table

//Library setup
[PTBR    ] = 63;
[PTBR + 1] = "0100";
[PTBR + 2] = 64;
[PTBR + 3] = "0100";

//Heap setup
[PTBR + 4] = 78;
[PTBR + 5] = "0110";
[PTBR + 6] = 79;
[PTBR + 7] = "0110";

//Setting up code segments
[PTBR + 8] =  65;
[PTBR + 9] =  "0100";
[PTBR + 10] = 66;
[PTBR + 11] = "0100";
[PTBR + 12] = -1;
[PTBR + 13] = "0000";
[PTBR + 14] = -1;
[PTBR + 15] = "0000";

//Stack setup
[PTBR + 16] = 76;
[PTBR + 17] = "0110";
[PTBR + 18] = 77;
[PTBR + 19] = "0110";

// adding -1 because we will increment SP and push the values every time we invoke "PUSH"

SP = 76*512 -1;
R0 = [65*512 +1];
multipush (R0);
SP = 8*512;
ireturn;
