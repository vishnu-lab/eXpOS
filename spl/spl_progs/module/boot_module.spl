//loading init program
loadi(65,7);
loadi(66,8);

//loading int 10 module
loadi(22,35);
loadi(23,36);

//loading exception handler
loadi(2, 15);
loadi(3, 16);

//loading library
loadi(63,13);
loadi(64,14);

//loading timer interrupt
loadi(4, 17);
loadi(5, 18);

//loading int 7 module
loadi(16,29);
loadi(17,30);

 //creating page table entries for init program
 PTBR = PAGE_TABLE_BASE + 20;
 PTLR = 10;

 //setting up the values of page table

 //Library setup
 [PTBR    ] = 63;
 [PTBR + 1] = "0100";
 [PTBR + 2] = 64;
 [PTBR + 3] = "0100";

 //Heap setup
 [PTBR + 4] = 78;
 [PTBR + 5] = "0110";
 [PTBR + 6] = 79;
 [PTBR + 7] = "0110";

 //Setting up code segments
 [PTBR + 8] =  65;
 [PTBR + 9] =  "0100";
 [PTBR + 10] = 66;
 [PTBR + 11] = "0100";
 [PTBR + 12] = -1;
 [PTBR + 13] = "0000";
 [PTBR + 14] = -1;
 [PTBR + 15] = "0000";

 //Stack setup
 [PTBR + 16] = 76;
 [PTBR + 17] = "0110";
 [PTBR + 18] = 77;
 [PTBR + 19] = "0110";




//setting up process table entries for init process
alias process_id R1;
process_id = 1;

//PID
[PROCESS_TABLE + process_id*16 + 1] = 1;
//state 
[PROCESS_TABLE + process_id*16 + 4] = CREATED;
//user area page num
[PROCESS_TABLE + process_id*16 + 11] = 80;
//KTPR
[PROCESS_TABLE + process_id*16 + 12] = 0;
//UTPR
[PROCESS_TABLE + process_id*16 + 13] = 8*512;
//PTBR
[PROCESS_TABLE + process_id*16 + 14] = PAGE_TABLE_BASE+20;
//PTLR
[PROCESS_TABLE + process_id*16 + 15] = 10;

R1 = SP;
SP = 76*512-1;
R0 = [65*512 +1];
multipush(R0);
SP = R1;
return;
